{"version":3,"sources":["img/logo2.png","location.js","Tomorrow.js","AfterTomorrow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","location","props","className","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","temperature","coldorhot","src","icon","tomorrow","dateBuilderPlus","afterTomorrow","dateBuilderPlus2","api","App","state","tomorrowtemperature","intowdays","icontomorror","icon2days","getCity","e","keyCode","city","target","value","axios","get","then","res","data","name","setState","current","temp_c","coldOrhot","condition","text","forecast","forecastday","maxtemp_c","icontomorrow","intwodays","this","type","placeholder","onKeyDown","Logo","Tomorrow","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bebbb36a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.8a81f6f5.png\";","import React from 'react';\r\n\r\nconst location = (props) => {\r\n\r\n    const dateBuilder = (d) => {\r\n        let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n        let days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\r\n      \r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n      \r\n        return `${day} ${date} ${month} ${year}`\r\n      }\r\n      \r\n    return (\r\n        <div className=\"Location\">\r\n        <p><span className=\"title\">{props.location}</span></p>\r\n        <p className=\"country\">{props.country}</p>\r\n         <p className=\"date\">{dateBuilder(new Date())}</p>\r\n    \r\n\r\n        <p><span className=\"title\">{props.temperature}</span></p>\r\n        <p className=\"title\"><b>{props.coldorhot}</b></p>\r\n        <img src={props.icon}  />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default location;","import React from 'react';\r\n\r\n\r\nconst tomorrow = (props) => {\r\n\r\n\r\n    const dateBuilderPlus = (d) => {\r\n        let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n        let days = [\"Sunday\",\"Monday\", \"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\r\n      \r\n        let day = days[d.getDay()+1];\r\n        let date = d.getDate()+1;\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n      \r\n        return `${day} ${date} ${month} ${year}`\r\n      } \r\n   \r\n      \r\n    return (\r\n\r\n        <div className=\"tomorrow\">\r\n                  <p className=\"titleforecast\">Tomorrow</p>\r\n                  <p className=\"data\">{dateBuilderPlus(new Date())}</p>\r\n                  <p><span className=\"tomorrowtemp\">{props.temperature}</span></p>\r\n                  <img src={props.icon} />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default tomorrow;","import React from 'react';\r\n\r\n\r\nconst afterTomorrow = (props) => {\r\n\r\n\r\n    const dateBuilderPlus2 = (d) => {\r\n        let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n        let days = [\"Sunday\",\"Monday\", \"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\r\n      \r\n        let day = days[d.getDay()+2];\r\n        let date = d.getDate()+2;\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n      \r\n        return `${day} ${date} ${month} ${year}`\r\n      } \r\n   \r\n      \r\n    return (\r\n\r\n        <div className=\"tomorrow\">\r\n                  <p className=\"titleforecast\">In 2 days</p>\r\n                  <p className=\"data\">{dateBuilderPlus2(new Date())}</p>\r\n                  <p><span className=\"twodaystemp\">{props.temperature}</span></p>\r\n                  <img src={props.icon} />\r\n\r\n                  </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default afterTomorrow;","import React, {Component} from 'react';\nimport Logo from '../src/img/logo2.png';\nimport Location from '../src/location';\nimport Tomorrow from '../src/Tomorrow';\nimport Aftertomorrow from '../src/AfterTomorrow';\nimport axios from 'axios';\n\nimport './App.css';\nimport './Media.css';\n\nconst api = {\n  key: \"614d8cc0d4da4374bda150647201507\",\n  base: \"http://api.weatherapi.com/v1/\"\n\n  }\n\n \n\n class App extends Component {\n\n  \n\n  state = {\n    location: null,\n    temperature: null,\n    coldorhot: null,\n    country:null,\n    icon:null,\n    tomorrowtemperature: null,\n    intowdays: null,\n    icontomorror:null,\n    icon2days:null\n\n\n  }\n\n  \n     \n\n      getCity = (e) => {\n\n        if(e.keyCode === 13){\n          \n          let city = e.target.value;\n           axios.get(`${api.base}forecast.json?key=${api.key}&q=${city}&days=7`).then((res)=>{\n            \n             const location = res.data.location.name;\n             this.setState({location:location})\n             const country = res.data.location.country;\n             this.setState({country:country});\n             const temperature = res.data.current.temp_c + '째C';\n             this.setState({temperature:temperature})\n             const coldOrhot = res.data.current.condition.text;\n             this.setState({coldorhot: coldOrhot})\n             const icon = res.data.current.condition.icon;\n             this.setState({icon:icon})\n             const tomorrow = res.data.forecast.forecastday[1].day.maxtemp_c +' '+ '째C';\n             this.setState({tomorrowtemperature:tomorrow});\n             const icontomorrow = res.data.forecast.forecastday[1].day.condition.icon;\n             this.setState({icontomorrow:icontomorrow})\n             const intwodays = res.data.forecast.forecastday[2].day.maxtemp_c +' '+'째C';\n             this.setState({intwodays: intwodays});\n             const icon2days = res.data.forecast.forecastday[2].day.condition.icon;\n             this.setState({icon2days:icon2days})\n\n             })\n\n             e.target.value=\"\";             \n             \n\n          }\n         \n          }\n    \n\n   \n\n  render () {\n\n      return (\n\n      \n\n      <div className={((this.state.temperature >= 20+ '째C') ? 'App warm' : 'App')}>\n\n            {/* input and enter location  */}\n\n            <p className=\"enter\">Please enter your location</p>\n         \n            <input  type=\"text\" \n                placeholder=\"Your Location\"\n                \n                onKeyDown={this.getCity}\n                \n            />\n          \n            {/* Logo  */}\n\n          <div className={((this.state.location!=null)  ? 'logo none' : 'logo')} >\n           <img src={Logo} />\n             <p>Your weather forecast</p>\n             <em>Developed by Tommaso Vitali in 2020 with React.Js</em>\n          </div>\n\n\n         \n        \n        \n              <div className={((this.state.location != null) ? 'wrapper' : 'wrapper none')}>\n\n                {/* Main - today weather  */}\n\n                <Location \n                location={this.state.location}\n                country={this.state.country}\n                temperature={this.state.temperature}\n                coldorhot={this.state.coldorhot}\n                icon={this.state.icon}/>\n\n\n                    {/* tomorrow and 2days forecast  */}\n              \n                    <div className=\"forecast\">\n                      <Tomorrow temperature= {this.state.tomorrowtemperature} icon={this.state.icontomorrow}/>\n                      <Aftertomorrow temperature={this.state.intwodays} icon= {this.state.icon2days} />\n                        \n                      </div>\n                </div>\n          \n          \n\n        \n      \n      \n    </div>\n\n\n    )\n\n    \n  }\n\n   \n    \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}